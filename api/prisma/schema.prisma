generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
  SUPPORT
}

enum RoomFeature {
  WIFI
  AIR_CONDITIONER
  TV
  MINIBAR
  SAFE_BOX
  BALCONY
  ROOM_SERVICE
  BATH_TUB
  HAIR_DRYER
}

enum HotelType {
  APARTMENT
  HOTEL
  VILLA
  BUNGALOW
  ROOM
  RESORT
  HOSTEL
  CAMP
}

enum HotelFeatures {
  WIFI
  POOL
  SPA
  PARKING
  GYM
  PET_FRIENDLY
  RESTAURANT
  BREAKFAST_INCLUDED
}

enum SupportCategory {
  TECHNICAL
  BILLING
  RESERVATION
  GENERAL
  COMPLAINT
  FEATURE_REQUEST
  OTHER
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  surname                 String
  email                   String    @unique
  phone                   String    @unique
  hashedPassword          String?
  role                    Role      @default(CUSTOMER)
  isVerified              Boolean   @default(false)
  verificationOTP         String?
  verificationOTPExpires  DateTime? @map("verification_otp_expires")
  resetPasswordOTP        String?
  resetPasswordOTPExpires DateTime? @map("reset_password_otp_expires")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  deletedAt               DateTime? @map("deleted_at")

  hotels       Hotel[]       @relation("HotelOwner")
  reservations Reservation[]
  tokens       Token[]
  paymentCards PaymentCard[]

  supportRequests Support[] @relation("UserSupport")
  handledSupports Support[] @relation("SupportRep")

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  comments  Comment[]
  favorites Favorite[]
  images    Image[]    @relation("UserImages")

  @@map("users")
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  hotelId   String
  createdAt DateTime @default(now())

  @@unique([userId, hotelId])
  @@map("favorites")
}

model PaymentCard {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String // Tokenleştirilmiş kart bilgisi
  brand     String // Kart markası (Visa, Mastercard vb.)
  last4     String // Kartın son 4 hanesi
  expiresAt DateTime // Son kullanma tarihi
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("payment_cards")
}

model Company {
  id                      String    @id @default(uuid())
  companyName             String
  email                   String    @unique
  hashedPassword          String
  verificationOTP         String?
  verificationOTPExpires  DateTime? @map("verification_otp_expires")
  resetPasswordOTP        String?
  resetPasswordOTPExpires DateTime? @map("reset_password_otp_expires")
  companyTaxId            String
  country                 String
  city                    String
  state                   String
  postCode                String
  fullAddress             String
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  logo Image[]

  @@map("company")
}

model Hotel {
  id                String    @id @default(uuid())
  name              String
  description       String?
  location          String
  address           String
  city              String
  country           String
  rating            Float?
  discountRate      Float? // İndirim oranı
  isDiscounted      Boolean   @default(false) // İndirim aktif mi?
  discountStartDate DateTime? // İndirim başlangıç tarihi
  discountEndDate   DateTime? // İndirim bitiş tarihi
  type              HotelType
  ownerId           String
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  taxId               String? // Vergi kimlik numarası
  taxOffice           String? // Vergi dairesi
  tradeRegistryNumber String? // Ticaret sicil numarası
  businessLicense     String? // İşletme ruhsatı numarası
  addressProof        String? // Adres kanıtı (Belge URL'si veya dosya yolu)
  taxCertificate      String? // Vergi levhası (Belge URL'si veya dosya yolu)

  owner     User         @relation("HotelOwner", fields: [ownerId], references: [id])
  rooms     Room[]
  images    Image[]      @relation("HotelImages")
  comments  Comment[]
  favorites Favorite[]
  props     HotelProps[] @relation("HotelProperties")

  @@map("hotels")
}

model HotelProps {
  id        String        @id @default(uuid())
  hotel     Hotel         @relation("HotelProperties", fields: [hotelId], references: [id])
  hotelId   String
  feature   HotelFeatures
  createdAt DateTime      @default(now())

  @@map("hotel_props")
}

model Comment {
  id        String   @id @default(uuid())
  rating    Int
  text      String?
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  hotelId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Room {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  capacity    Int
  bedCount    Int
  isAvailable Boolean   @default(true)
  hotelId     String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  hotel         Hotel               @relation(fields: [hotelId], references: [id])
  bookings      Reservation[]
  featureStatus RoomFeatureStatus[]
  images        Image[]             @relation("RoomImages")

  @@map("rooms")
}

model RoomFeatureStatus {
  id          String      @id @default(uuid())
  feature     RoomFeature
  isAvailable Boolean     @default(false)
  room        Room        @relation(fields: [roomId], references: [id])
  roomId      String
  deletedAt   DateTime?   @map("deleted_at")

  @@map("room_feature_statuses")
}

model Image {
  id        String    @id @default(uuid())
  url       String
  hotel     Hotel?    @relation("HotelImages", fields: [hotelId], references: [id])
  hotelId   String?
  room      Room?     @relation("RoomImages", fields: [roomId], references: [id])
  roomId    String?
  user      User?     @relation("UserImages", fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId String?

  @@map("images")
}

model Reservation {
  id         String    @id @default(uuid())
  checkIn    DateTime
  checkOut   DateTime
  guests     Int
  totalPrice Float
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  @@map("reservations")
}

model Support {
  id        String          @id @default(uuid())
  subject   String
  body      String
  category  SupportCategory @default(GENERAL)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  closedAt  DateTime?       @map("closed_at")

  user   User   @relation("UserSupport", fields: [userId], references: [id])
  userId String

  supportRep   User?   @relation("SupportRep", fields: [supportRepId], references: [id])
  supportRepId String?

  messages Message[]

  @@map("supports")
}

model Message {
  id         String    @id @default(uuid())
  content    String
  sender     User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  support    Support?  @relation(fields: [supportId], references: [id])
  supportId  String?
  createdAt  DateTime  @default(now()) @map("created_at")
  readAt     DateTime?
  deletedAt  DateTime? @map("deleted_at")

  @@map("messages")
}

model EmailLog {
  id      String   @id @default(uuid())
  to      String
  subject String
  body    String
  sentAt  DateTime @default(now())

  @@map("email_logs")
}

model Token {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresAt DateTime  @map("expires_at")
  revokedAt DateTime? @map("revoked_at")

  user User @relation(fields: [userId], references: [id])

  @@map("tokens")
}
